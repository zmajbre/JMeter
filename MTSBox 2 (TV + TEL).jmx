<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="MTSBox 2 (TV + TEL)" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="238285608">MTSBox 2 (TV + TEL)</stringProp>
            <stringProp name="2377253">MTS1</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="MTS1" enabled="false"/>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="URL" elementType="Argument">
              <stringProp name="Argument.name">URL</stringProp>
              <stringProp name="Argument.value">/oec/api/v2/promotions/box-2-tv-tel/include-attributes-included-products/items-promotions</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="alias" elementType="Argument">
              <stringProp name="Argument.name">alias</stringProp>
              <stringProp name="Argument.value">box-2-tv-tel</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://mts.wm.rs/oec/api/v2/promotions/box-2-tv-tel/include-attributes-included-products/items-promotions</stringProp>
              <stringProp name="Authorization.username">root</stringProp>
              <stringProp name="Authorization.password">root</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - box-2-tv-tel" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">mts.wm.rs</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${URL}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="MTS2" enabled="false"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Box 2 (TV + TEL)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="URL" elementType="Argument">
              <stringProp name="Argument.name">URL</stringProp>
              <stringProp name="Argument.value">/oec/api/v2/promotions/box-2-tv-tel/include-attributes-included-products/items-promotions</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="alias" elementType="Argument">
              <stringProp name="Argument.name">alias</stringProp>
              <stringProp name="Argument.value">box-2-tv-tel</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - box-2-tv-tel" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">mts.wm.rs</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${URL}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://mts.wm.rs/oec/api/v2/promotions/box-2-tv-tel/include-attributes-included-products/items-promotions</stringProp>
              <stringProp name="Authorization.username">root</stringProp>
              <stringProp name="Authorization.password">root</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Simple list testing response" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="-318243808">&quot;name&quot;:&quot;(.*)&quot;</stringProp>
            <stringProp name="1152151785">&quot;title&quot;:&quot;(.*)&quot;</stringProp>
            <stringProp name="-1357499278">&quot;promo_text&quot;:&quot;(.*)&quot;</stringProp>
            <stringProp name="-2092824709">&quot;items&quot;:(.*)</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Alias Response " enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="698458050">&quot;alias&quot;:&quot;${alias}&quot;</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import groovy.json.JsonSlurper
import java.util.regex.Matcher;
import java.util.regex.Pattern;

def jsonSlurper = new JsonSlurper();
def response = jsonSlurper.parseText(prev.getResponseDataAsString());

assert response.name instanceof String
assert response.title instanceof String
assert response.promo_text instanceof String
assert response.items instanceof Object

log.info (&quot;ZARKOOOOOOO&quot; + response)
log.info (&quot;ZARKOOOOOOO&quot; + response)

def is_featuredZeroOrOne = true;
def itemsPromotionsEmptyOrNot = true;


assert response.items.id instanceof Integer
       assert response.items.original_id instanceof Integer
       assert response.items.external_id instanceof String
       assert response.items.name instanceof String
       assert response.items.short_name instanceof String
       
       assert response.items.price_recurring instanceof Object
       Pattern p1 = Pattern.compile (&quot;(\\d+[\\.,\\,]?)+&quot;);
       Matcher m1 = p1.matcher(response.items.price_recurring);
    	  assert m1.matches()
    	  assert response.items.is_featured instanceof Integer
    	  if (response.items.is_featured != 0 &amp;&amp; response.items.is_featured != 1) {
           is_featuredZeroOrOne = false;
       }
    	  assert response.items.url instanceof String
    	  assert response.items.promotions instanceof List
    	  def emptyList = [];
    	  if (response.items.promotions == emptyList) {
    	  	itemsPromotionsEmptyOrNot = true;	
    	  }
    	  else if (response.items.promotions != emptyList){
    	  	for (promotion in response.items.promotions) { 
    	  		if (promotion.category_alias != &quot;specialOfferAction&quot;){
    	  			itemsPromotionsEmptyOrNot = false
    	  		}
    	  	}	
    	  }
    	  assert response.items.included instanceof List
       def hasAtLeastOneTvPackage = false;
       def hasAtLeastOneCalls = false;     
       def isRecomandedZeroOrOne = true;
       def includedPromotionsEmptyOrNot = true;
       
       for (int j=0; j&lt;response.items.included.size(); j++){
           assert response.items.included[j].id instanceof Integer
           assert response.items.included[j].original_id instanceof Integer
           assert response.items.included[j].external_id instanceof String
           assert response.items.included[j].long_name instanceof String
           assert response.items.included[j].short_name instanceof String
           assert response.items.included[j].description instanceof String
           assert response.items.included[j].product_category instanceof Object
           Pattern p2 = Pattern.compile (&quot;(tv|tel)&quot;); 
           Matcher m2 = p2.matcher (response.items.included[j].product_category);
           assert m2.matches()
           if (response.items.included[j].product_category == &quot;tv&quot; &amp;&amp; response.items.included[j].product_subtype == &quot;tv-package&quot;) {
           	hasAtLeastOneTvPackage = true;
           }

           if (response.items.included[j].product_category == &quot;tel&quot; &amp;&amp; response.items.included[j].product_subtype == &quot;calls&quot;) {
           	hasAtLeastOneCalls = true;
           }	
          
           if (response.items.included[j].is_recommended != 0 &amp;&amp; response.items.included[j].is_recommended != 1) {
           	isRecomandedZeroOrOne = false;
           }
           assert response.items.included[j].category_gallery instanceof Object
           Pattern p3 = Pattern.compile (&quot;(^(https?)://(.*))&quot;); 
           Matcher m3 = p3.matcher(response.items.included[j].category_gallery);
    	      assert m3.matches() // ili **
    	      if (response.items.included[j].promotions == emptyList) {
    	  	     includedPromotionsEmptyOrNot = true;	
    	      }
    	      else if (response.items.included[j].promotions != emptyList){
    	  	      for (promotion in response.items.included[j].promotions) { 
    	  		       if (promotion.category_alias != &quot;gift&quot; ){
    	  			  includedPromotionsEmptyOrNot = false
    	  		       }
    	  	      }	
    	      }

           
           if (response.items.included[j].product_subtype == &quot;go-services&quot; || response.items.included[j].product_subtype == &quot;calls&quot;) {
           	 assert response.items.included[j].attributes instanceof Object
           	 for (list in response.items.included[j].attributes) {
           	 	assert list.value instanceof List
           	     for (sublist in list.value) {
           	     	assert sublist.attribute_name instanceof String
           	     	
           	     	for (subsublist in sublist.value) {
           	     		assert subsublist.gallery instanceof String 
           	          }
           	     }
               }
           } 
          
       }
       
       assert hasAtLeastOneTvPackage
       assert hasAtLeastOneCalls
       assert isRecomandedZeroOrOne
       assert includedPromotionsEmptyOrNot
       
    
assert is_featuredZeroOrOne
assert itemsPromotionsEmptyOrNot </stringProp>
        </JSR223Assertion>
        <hashTree/>
        <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
          <stringProp name="JSON_PATH">$.name</stringProp>
          <stringProp name="EXPECTED_VALUE">Box 2 (TV + TEL)</stringProp>
          <boolProp name="JSONVALIDATION">true</boolProp>
          <boolProp name="EXPECT_NULL">false</boolProp>
          <boolProp name="INVERT">false</boolProp>
          <boolProp name="ISREGEX">false</boolProp>
        </JSONPathAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
